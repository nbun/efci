interface ReverseHO where {
import Prelude;
data List a = Nil | Cons a (List a);
data MyBool = MyTrue | MyFalse;
data Nat = O | S Nat;
add 2 :: Nat -> Nat -> Nat;
double 1 :: Nat -> Nat;
four 0 :: Nat;
goal0 0 :: List MyBool;
isList 1 :: List a -> MyBool;
main 0 :: MyBool;
mult 2 :: Nat -> Nat -> Nat;
myflip 3 :: (a -> b -> c) -> b -> a -> c;
myfoldl 3 :: (a -> b -> a) -> a -> List b -> a;
nat16 0 :: Nat;
nat16384 0 :: Nat;
nat1M 0 :: Nat;
nat256 0 :: Nat;
nat4096 0 :: Nat;
nat4M 0 :: Nat;
natList 1 :: Nat -> List Nat;
rev 0 :: List a -> List a;
rev2 1 :: List a -> List a;
revHO_16K 0 :: MyBool;
revHO_1M 0 :: MyBool;
revHO_256 0 :: MyBool;
two 0 :: Nat;
instance Prelude.Data a => Prelude.Data (List a) {
  (===) 2;
  aValue 0
};
instance Prelude.Data MyBool {
  (===) 2;
  aValue 0
};
instance Prelude.Data Nat {
  (===) 2;
  aValue 0
};
hiding class Prelude.Data a;
instance Prelude.Data () {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b) => Prelude.Data (a, b) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b,
          Prelude.Data c) => Prelude.Data (a, b, c) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b, Prelude.Data c,
          Prelude.Data d) => Prelude.Data (a, b, c, d) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b, Prelude.Data c,
          Prelude.Data d, Prelude.Data e) => Prelude.Data (a, b, c, d, e) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b, Prelude.Data c,
          Prelude.Data d, Prelude.Data e, Prelude.Data f) => Prelude.Data (a,
                                                                           b, c, d, e, f) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance (Prelude.Data a, Prelude.Data b, Prelude.Data c,
          Prelude.Data d, Prelude.Data e, Prelude.Data f,
          Prelude.Data g) => Prelude.Data (a, b, c, d, e, f, g) {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance Prelude.Data a => Prelude.Data [a] {
  aValue 0;
  (===) 2
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Bool {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Char {
  aValue 0;
  (===) 0
} {-# MODULE Prelude #-};
instance (Prelude.Data a,
          Prelude.Data b) => Prelude.Data (Prelude.Either a b) {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Float {
  aValue 0;
  (===) 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.IOError {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Int {
  aValue 0;
  (===) 0
} {-# MODULE Prelude #-};
instance Prelude.Data a => Prelude.Data (Prelude.Maybe a) {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
instance Prelude.Data Prelude.Ordering {
  (===) 2;
  aValue 0
} {-# MODULE Prelude #-};
hiding data Prelude.Bool;
hiding data Prelude.Char;
hiding data Prelude.Either a b;
hiding data Prelude.Float;
hiding data Prelude.IOError;
hiding data Prelude.Int;
hiding data Prelude.Maybe a;
hiding data Prelude.Ordering
}